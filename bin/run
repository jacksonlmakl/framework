#!/bin/bash
sudo apt update && sudo apt install -y python3 python3-venv python3-pip && \

# Create virtual environment if it doesn't exist
python3 -m venv env
# Activate virtual environment
source env/bin/activate

pip install -r ../model/requirements.txt


# Check if yaml parser is installed
if ! command -v yq &> /dev/null; then
    echo "Error: yq is not installed. Please install it first."
    echo "To install: pip install yq"
    exit 1
fi
# Define the YAML config file
CONFIG_FILE="./controller.yaml"
# Check if the config file exists
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Error: Configuration file '$CONFIG_FILE' not found."
    exit 1
fi
# Get the number of steps
STEP_COUNT=$(yq -r '.steps | length' "$CONFIG_FILE")
# Loop through each step
for ((i=0; i<$STEP_COUNT; i++)); do
    # Extract step details
    STEP_NAME=$(yq -r ".steps[$i].name" "$CONFIG_FILE")
    
    # Initialize environment variables command parts
    TABLE_PART=""
    EXECUTE_PART=""
    DATABASE_PART=""
    
    # Check if table, execute, and database exist
    if yq -e ".steps[$i].table" "$CONFIG_FILE" > /dev/null 2>&1; then
        TABLE_PATH="model/$(yq -r ".steps[$i].table" "$CONFIG_FILE")"
        TABLE_PART="TABLE=${TABLE_PATH}"
    fi
    
    if yq -e ".steps[$i].execute" "$CONFIG_FILE" > /dev/null 2>&1; then
        # Extract the execute value first
        EXECUTE_VALUE=$(yq -r ".steps[$i].execute" "$CONFIG_FILE")
        
        # Conditionally prepend "model/" if the value is not "s3"
        if [ "$EXECUTE_VALUE" = "s3" ]; then
          EXECUTE_PATH="$EXECUTE_VALUE"
        else
          EXECUTE_PATH="model/$EXECUTE_VALUE"
        fi
        EXECUTE_PART="EXECUTE=${EXECUTE_PATH}"
    fi
    
    if yq -e ".steps[$i].database" "$CONFIG_FILE" > /dev/null 2>&1; then
        DATABASE=$(yq -r ".steps[$i].database" "$CONFIG_FILE")
        DATABASE_PART="DATABASE=${DATABASE}"
    fi
    
    echo "-------------------------------------"
    echo "Executing step: $STEP_NAME"
    if [ -n "$TABLE_PART" ]; then echo "TABLE=$TABLE_PATH"; fi
    if [ -n "$EXECUTE_PART" ]; then echo "EXECUTE=$EXECUTE_PATH"; fi
    if [ -n "$DATABASE_PART" ]; then echo "DATABASE=$DATABASE"; fi
    echo "-------------------------------------"
    
    # Construct the command
    CMD=""
    if [ -n "$TABLE_PART" ]; then
        CMD="$TABLE_PART"
    fi
    
    if [ -n "$EXECUTE_PART" ]; then
        if [ -n "$CMD" ]; then
            CMD="$CMD $EXECUTE_PART"
        else
            CMD="$EXECUTE_PART"
        fi
    fi
    
    if [ -n "$DATABASE_PART" ]; then
        if [ -n "$CMD" ]; then
            CMD="$CMD $DATABASE_PART"
        else
            CMD="$DATABASE_PART"
        fi
    fi
    
    # Run the command
    if [ -n "$CMD" ]; then
        eval "$CMD python module"
    else
        echo "Warning: No parameters (TABLE, EXECUTE, DATABASE) defined for this step"
        python module
    fi
    
    # Check if the command was successful
    if [ $? -eq 0 ]; then
        echo "✅ Step completed successfully"
    else
        echo "❌ Step failed with error code $?"
    fi
    
    echo ""
done
echo "All steps completed!"
