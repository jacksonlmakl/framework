
#!/bin/bash

# deploy.sh - Script to build Docker image for the framework and run as a scheduled service

# Exit on error
set -e

# Set variables
IMAGE_NAME="framework"
IMAGE_TAG="latest"
CONTAINER_NAME="framework-scheduler"


# Check if we're in the repository root directory
if [ ! -d "./bin" ] || [ ! -f "./bin/run" ]; then
    echo "❌ Error: This script should be run from the repository root directory."
    exit 1
fi

# Create Dockerfile with Ubuntu base that supports cron
echo "📝 Creating Dockerfile with scheduling support..."
cat > Dockerfile << 'EOL'
FROM ubuntu:22.04

USER root

# Set non-interactive mode for apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and dependencies including cron and jq
RUN apt-get update && \
    apt-get install -y python3 python3-pip wget curl jq cron && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    pip3 install --upgrade pip

# Install yq using pip
RUN pip install yq

# Set working directory
WORKDIR /app

# Copy requirements file
COPY module/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the entire repository
COPY . .

# Make run script executable
RUN chmod +x ./bin/run

# Create a wrapper script to run with logging
RUN echo '#!/bin/bash\n\
cd /app && ./bin/run --run >> /app/cron.log 2>&1\n\
' > /app/run_scheduled.sh && chmod +x /app/run_scheduled.sh

# Create entrypoint script to set up cron and keep container running
RUN echo '#!/bin/bash\n\
\n\
# Extract schedule from controller.yaml if it exists\n\
if command -v yq &> /dev/null && [ -f "/app/controller.yaml" ] && yq -e ".schedule" "/app/controller.yaml" > /dev/null 2>&1; then\n\
    SCHEDULE=$(yq -r ".schedule" "/app/controller.yaml")\n\
    echo "📅 Found schedule in controller.yaml: $SCHEDULE"\n\
    \n\
    # Create cron job\n\
    echo "$SCHEDULE /app/run_scheduled.sh" > /etc/cron.d/framework-cron\n\
    chmod 0644 /etc/cron.d/framework-cron\n\
    crontab /etc/cron.d/framework-cron\n\
    echo "✅ Cron job installed"\n\
else\n\
    echo "⚠️ No schedule found in controller.yaml, will run once now and then stay idle"\n\
fi\n\
\n\
# Start cron service\n\
service cron start\n\
echo "✅ Cron service started"\n\
\n\
# Run once immediately\n\
echo "🚀 Running initial execution..."\n\
/app/run_scheduled.sh\n\
\n\
# Keep container running\n\
echo "🔄 Container will remain running for scheduled executions"\n\
tail -f /app/cron.log\n\
' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Set the entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
EOL

# Build the Docker image
echo "🔨 Building Docker image: $IMAGE_NAME:$IMAGE_TAG"
if run_docker build -t $IMAGE_NAME:$IMAGE_TAG .; then
    echo "✅ Docker image built successfully!"
    
    # Stop and remove existing container if it exists
    if run_docker ps -a | grep -q $CONTAINER_NAME; then
        echo "🔄 Stopping and removing existing container..."
        run_docker stop $CONTAINER_NAME || true
        run_docker rm $CONTAINER_NAME || true
    fi
    
    # Run the container with restart policy and volume mounts
    echo "🚀 Starting container with auto-restart..."
    run_docker run -d \
        --name $CONTAINER_NAME \
        --restart always \
        --privileged \
        -v $(pwd)/controller.yaml:/app/controller.yaml \
        -v $(pwd)/model:/app/model \
        -v $(pwd)/data:/app/data \
        $IMAGE_NAME:$IMAGE_TAG
    
    echo ""
    echo "✅ Container is now running in the background with auto-restart"
    echo "📋 Container logs can be viewed with: ${USE_SUDO:+sudo }docker logs $CONTAINER_NAME"
    echo "📊 To stop the container: ${USE_SUDO:+sudo }docker stop $CONTAINER_NAME"
else
    echo "❌ Docker image build failed."
    exit 1
fi


