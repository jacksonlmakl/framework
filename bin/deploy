#!/bin/bash

# deploy.sh - Script to build Docker image for the framework and run as a scheduled service

# Exit on error
set -e

# Set variables
IMAGE_NAME="framework"
IMAGE_TAG="latest"
CONTAINER_NAME="framework-scheduler"

# Check if we're in the repository root directory
if [ ! -d "./bin" ] || [ ! -f "./bin/run" ]; then
    echo "❌ Error: This script should be run from the repository root directory."
    exit 1
fi

# Create Dockerfile with Ubuntu base that supports cron
echo "📝 Creating Dockerfile with scheduling support..."

cat > Dockerfile << 'EOL'
FROM docker.io/jrei/systemd-ubuntu:22.04

USER root

# Set non-interactive mode for apt
ENV DEBIAN_FRONTEND=noninteractive

# Install Python and dependencies including cron and jq
RUN apt-get update && \
    apt-get install -y python3 python3-pip wget curl jq cron dbus && \
    ln -s /usr/bin/python3 /usr/bin/python && \
    pip3 install --upgrade pip

# Force `debconf` to avoid interactive mode
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections


# Install yq using pip
RUN pip install yq

# Set working directory
WORKDIR /app

# Copy requirements file
COPY module/requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the entire repository
COPY . .

# Make run script executable
RUN chmod +x ./bin/run

# Create a wrapper script to run with logging
RUN echo '#!/bin/bash\n\
cd /app && ./bin/run --run >> /app/cron.log 2>&1\n\
' > /app/run_scheduled.sh && chmod +x /app/run_scheduled.sh

# Create entrypoint script to set up cron and keep container running
RUN echo '#!/bin/bash
set -e  # Exit on error

echo "🚀 Setting up container..."

# Ensure the container is running with correct permissions
if [[ "$EUID" -ne 0 ]]; then
  echo "❌ Error: This script must be run as root."
  exit 1
fi

# Set non-interactive mode for apt
export DEBIAN_FRONTEND=noninteractive

# Start dbus manually (needed for systemctl commands inside Docker)
echo "🔄 Starting dbus..."
mkdir -p /var/run/dbus
dbus-daemon --system --fork

# Check if systemd is available
if [[ -d /run/systemd/system ]]; then
  echo "🔄 Starting systemd..."
  exec /lib/systemd/systemd
else
  echo "⚠️ Systemd is not available. Running cron manually."

  # Create cron job from controller.yaml (if exists)
  if command -v yq &> /dev/null && [ -f "/app/controller.yaml" ]; then
    SCHEDULE=$(yq -r ".schedule" "/app/controller.yaml")
    echo "📅 Found schedule in controller.yaml: $SCHEDULE"

    echo "$SCHEDULE /app/run_scheduled.sh" > /etc/cron.d/framework-cron
    chmod 0644 /etc/cron.d/framework-cron
    crontab /etc/cron.d/framework-cron
    echo "✅ Cron job installed"
  else
    echo "⚠️ No schedule found in controller.yaml, will run once now and then stay idle"
  fi

  # Start cron manually
  service cron start
  echo "✅ Cron service started"

  # Run once immediately
  echo "🚀 Running initial execution..."
  /app/run_scheduled.sh

  # Keep container running
  echo "🔄 Container will remain running for scheduled executions"
  tail -f /app/cron.log
fi
' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Set the entrypoint
CMD ["/app/entrypoint.sh"]
EOL

# Build the Docker image
echo "🔨 Building Docker image: $IMAGE_NAME:$IMAGE_TAG"
if docker build -t $IMAGE_NAME:$IMAGE_TAG .; then
    echo "✅ Docker image built successfully!"
    
    # Stop and remove existing container if it exists
    if docker ps -a | grep -q $CONTAINER_NAME; then
        echo "🔄 Stopping and removing existing container..."
        docker stop $CONTAINER_NAME || true
        docker rm $CONTAINER_NAME || true
    fi
    
    # Run the container with restart policy and volume mounts
    echo "🚀 Starting container with auto-restart..."
    docker run -d \
        --name $CONTAINER_NAME \
        --restart always \
        --privileged \
        --tmpfs /run --tmpfs /run/lock \
        -v /sys/fs/cgroup:/sys/fs/cgroup:ro \
        -v $(pwd)/controller.yaml:/app/controller.yaml \
        -v $(pwd)/model:/app/model \
        -v $(pwd)/data:/app/data \
        $IMAGE_NAME:$IMAGE_TAG
    
    echo ""
    echo "✅ Container is now running in the background with auto-restart"
    echo "📋 Container logs can be viewed with: docker logs $CONTAINER_NAME"
    echo "📊 To stop the container: docker stop $CONTAINER_NAME"
else
    echo "❌ Docker image build failed."
    exit 1
fi
